@{
Layout = "_Layout";
}

<partial name="_ComputerModeSettingsModal"/>

<partial name="_TicTacToeBoard"/>

@section Scripts {
    <script>
        let currentPage = 1;
        const pageSize = 10;
        let totalPages = 1;
        
        function startNewGame() {
            const modal = bootstrap.Modal.getInstance(document.getElementById('settingsModal'));
            modal.hide();

            const playerName = document.getElementById('playerName').value;
            const playerColor = document.getElementById('playerColor').value;
            const playerSymbol = document.getElementById('playerSymbol').value;

            // Reset board visually
            document.querySelectorAll('.cell').forEach(cell => {
                cell.querySelector('span').innerHTML = '';
                cell.classList.remove('win');
            });

            fetch('/Computer/NewGame', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    playerName,
                    playerColor,
                    playerSymbol
                })
            })
                .then(response => response.json())
                .then(data => {
                    // Handle computer's first move if player chose O
                    if (data.computerFirstMove !== null) {
                        const computerCell = document.querySelector(`[data-index="${data.computerFirstMove}"]`);
                        computerCell.querySelector('span').innerHTML = data.computerSymbol;
                        computerCell.querySelector('span').style.color = '#0000ff';
                    }
                    document.getElementById('game-status').innerHTML = 'Game started!';
                });
        }

    function resetBoard() {
        document.querySelectorAll('.cell').forEach(cell => {
            const span = cell.querySelector('span');
            if (span) {
                span.innerHTML = '';
                span.style.color = '';
            }
            cell.classList.remove('win');
        });
        document.getElementById('game-status').innerHTML = '';
    }

        function makeMove(cell) {
            const index = cell.getAttribute('data-index');

            fetch('/Computer/MakeMove', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ cellIndex: parseInt(index) })
            })
                .then(response => response.json())
                .then(data => {
                    if (data.isValid) {
                        // Update player's move
                        cell.querySelector('span').innerHTML = data.playerSymbol;
                        cell.querySelector('span').style.color = data.playerColor;

                        // Update computer's move
                        if (data.computerIndex !== null) {
                            const computerCell = document.querySelector(`[data-index="${data.computerIndex}"]`);
                            computerCell.querySelector('span').innerHTML = data.computerSymbol;
                            computerCell.querySelector('span').style.color = '#0000ff';
                        }

                        // Handle game over
                        if (data.isGameOver) {
                            document.getElementById('game-status').innerHTML = data.winnerMessage;
                            if (data.winningCombination) {
                                data.winningCombination.forEach(index => {
                                    document.querySelector(`[data-index="${index}"]`).classList.add('win');
                                });
                            }
                        }
                    }
                })
            .catch(error => {
                console.error('Error:', error);
                alert('Move error: ' + error.message);
            });
    }

        function loadHistory(page) {
            if (page < 1 || page > totalPages) return;

            fetch(`/Computer/GetHistory?page=${page}&pageSize=${pageSize}`)
                .then(response => {
                    if (!response.ok) throw new Error('Network response was not ok');
                    return response.json();
                })
                .then(data => {
                    currentPage = page;
                    totalPages = data.totalPages;

                    // Update table
                    const tbody = document.getElementById('history-body');
                    tbody.innerHTML = data.games.map(game => `
                        <tr>
                            <td>${new Date(game.date).toLocaleString()}</td>
                            <td>${game.playerName}</td>
                            <td>
                                <span class="color-box" 
                                      style="background-color: ${game.playerColor}"></span>
                                ${game.playerColor}
                            </td>
                            <td>
                                <span class="badge ${getResultClass(game.result)}">
                                    ${game.result}
                                </span>
                            </td>
                        </tr>
                    `).join('');

                    // Update pagination controls
                    document.getElementById('current-page').textContent = `Page ${currentPage} of ${totalPages}`;
                    document.getElementById('prev-page').disabled = currentPage === 1;
                    document.getElementById('next-page').disabled = currentPage === totalPages;
                })
                .catch(error => {
                    console.error('Error loading history:', error);
                    alert('Error loading game history');
                });
        }

        function getResultClass(result) {
            return {
                'Win': 'bg-success',
                'Loss': 'bg-danger',
                'Draw': 'bg-warning text-dark'
            }[result] || 'bg-secondary';
        }

        // Initial load
        document.addEventListener('DOMContentLoaded', () => loadHistory(1));

        function previousPage() {
            if (currentPage > 1) loadHistory(currentPage - 1);
        }

        function nextPage() {
            if (currentPage < totalPages) loadHistory(currentPage + 1);
        }

    </script>
}