@{
Layout = "_Layout";
}

<div class="modal fade" id="multiplayerSettings" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Multiplayer Settings</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div class="mb-3">
                    <label class="form-label">Player 1 Name</label>
                    <input type="text" id="player1Name" class="form-control" required>
                    <input type="color" id="player1Color" class="form-control mt-2" value="#ff0000">
                </div>
                <div class="mb-3">
                    <label class="form-label">Player 2 Name</label>
                    <input type="text" id="player2Name" class="form-control" required>
                    <input type="color" id="player2Color" class="form-control mt-2" value="#0000ff">
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" onclick="startMultiplayerGame()">Start Game</button>
            </div>
        </div>
    </div>
</div>

<div class="container mt-5">
    <div class="text-center">
        <h2>Multiplayer Mode</h2>
        <div class="text-center mt-4 mb-2">
            <button class="btn btn-success me-2" data-bs-toggle="modal" data-bs-target="#multiplayerSettings">
                New Game
            </button>
            <a asp-controller="Home" asp-action="Leaderboard" class="btn btn-info">Leaderboard</a>
        </div>

        <div class="d-flex justify-content-center">
            <div id="game-grid" class="grid" style="display: grid; grid-template-columns: repeat(3, 100px); gap: 5px;">
                @for (int i = 0; i < 9; i++)
                {
                <div class="cell border border-dark d-flex align-items-center justify-content-center"
                     data-index="@i"
                     style="width: 100px; height: 100px; font-size: 2rem; cursor: pointer;"
                     onclick="makeMultiplayerMove(this)">
                    <span></span>
                </div>
                }
            </div>
        </div>

        <div id="game-status" class="mt-3 h4"></div>
        <a asp-controller="Home" asp-action="Index" class="btn btn-outline-secondary mt-3">Back to Home</a>
    </div>
</div>

@section Scripts {
    <script>
    function startMultiplayerGame() {
        const modal = bootstrap.Modal.getInstance(document.getElementById('multiplayerSettings'));
        if (modal) modal.hide();

        const player1Name = document.getElementById('player1Name').value;
        const player2Name = document.getElementById('player2Name').value;
        const player1Color = document.getElementById('player1Color').value;
        const player2Color = document.getElementById('player2Color').value;

        fetch('/Multiplayer/NewGame', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                player1Name: player1Name,
                player2Name: player2Name,
                player1Color: player1Color,
                player2Color: player2Color
            })
        }).then(response => {
            if (!response.ok) throw new Error('Failed to start game');
            resetBoard();
            updateGameStatus(`${player1Name}'s turn (X)`, player1Color);
            document.getElementById('game-status').innerHTML = 'Game started!';
        });
    }

    function makeMultiplayerMove(cell) {
        const index = cell.getAttribute('data-index');

        fetch('/Multiplayer/MakeMove', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ cellIndex: parseInt(index) })
        })
            .then(response => response.json())
            .then(data => {
                if (data.isValid) {
                    const span = cell.querySelector('span');
                    span.textContent = data.playedSymbol;
                    span.style.color = data.playedColor; // Use the returned playedColor

                    if (data.isGameOver) {
                        document.getElementById('game-status').textContent = data.message;
                        document.getElementById('game-status').style.color = '#000000';
                        if (data.combination) {
                            data.combination.forEach(idx => {
                                document.querySelector(`[data-index="${idx}"]`).classList.add('win');
                            });
                        }
                    } else {
                        updateGameStatus(
                            `${data.currentSymbol === 'X'
                                ? document.getElementById('player1Name').value
                                : document.getElementById('player2Name').value}'s turn (${data.currentSymbol})`,
                            data.currentColor
                        );
                    }
                }
            })
            .catch(error => console.error('Error:', error));
    }

    function updateGameStatus(text, color) {
        const status = document.getElementById('game-status');
        status.textContent = text;
    }

    function resetBoard() {
        document.querySelectorAll('.cell').forEach(cell => {
            cell.querySelector('span').textContent = '';
            cell.classList.remove('win');
        });
        document.getElementById('game-status').textContent = '';
    }
</script>
}