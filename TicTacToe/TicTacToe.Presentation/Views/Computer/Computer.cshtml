@{
Layout = "_Layout";
}

<div class="modal fade" id="settingsModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Game Settings</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div class="mb-3">
                    <label class="form-label">Player Name</label>
                    <input type="text" id="playerName" class="form-control" value="Player 1" required>
                </div>
                <div class="mb-3">
                    <label class="form-label">Player Color</label>
                    <input type="color" id="playerColor" class="form-control" value="#ff0000" required>
                </div>
                <div class="mb-3">
                    <label class="form-label">Player Symbol</label>
                    <select id="playerSymbol" class="form-select">
                        <option value="X">X (Play First)</option>
                        <option value="O">O (Computer Plays First)</option>
                    </select>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" onclick="startNewGame()">Start Game</button>
            </div>
        </div>
    </div>
</div>

<div class="container mt-5">
    <div class="text-center">
        <h2>Play with Computer</h2>
        <div class="text-center mt-4 mb-2">
            <button class="btn btn-success me-2" data-bs-toggle="modal" data-bs-target="#settingsModal">
                New Game
            </button>
            <a asp-controller="Leaderboard" asp-action="Index" class="btn btn-info">Leaderboard</a>
        </div>

        <div class="d-flex justify-content-center">
            <div id="game-grid" class="grid" style="display: grid; grid-template-columns: repeat(3, 100px); gap: 5px;">
                @for (int i = 0; i < 9; i++)
                {
                <div class="cell border border-dark d-flex align-items-center justify-content-center"
                     data-index="@i"
                     style="width: 100px; height: 100px; font-size: 2rem; cursor: pointer;"
                     onclick="makeMove(this)">
                    <span></span>
                </div>
                }
            </div>
        </div>

        <div id="game-status" class="mt-3 h4"></div>
        <a asp-controller="Home" asp-action="Index" class="btn btn-outline-secondary mt-3">Back to Home</a>
    </div>
</div>

@section Scripts {
    <script>
        function startNewGame() {
            const modal = bootstrap.Modal.getInstance(document.getElementById('settingsModal'));
            if (modal) modal.hide();

            const playerName = document.getElementById('playerName').value;
            const playerColor = document.getElementById('playerColor').value;
            const playerSymbol = document.getElementById('playerSymbol').value;

            // Clear the board immediately
            resetBoard();

            fetch('/Computer/NewGame', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    playerName,
                    playerColor,
                    playerSymbol
                })
            })
                .then(response => {
                    if (!response.ok) return response.json().then(err => { throw new Error(err.error) });
                    return response.json();
                })
                .then(data => {
                    // Handle computer first move if needed
                    if (data.computerFirstMove !== null && data.computerFirstMove !== undefined) {
                        const computerCell = document.querySelector(`[data-index="${data.computerFirstMove}"]`);
                        if (computerCell) {
                            const computerSpan = computerCell.querySelector('span');
                            if (computerSpan) {
                                computerSpan.innerHTML = data.computerSymbol;
                                computerSpan.style.color = '#0000ff';
                            }
                        }
                    }

                    const gameStatus = document.getElementById('game-status');
                    if (gameStatus) gameStatus.innerHTML = 'Game started!';
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('Error starting game: ' + error.message);
                });
        }

    function resetBoard() {
        document.querySelectorAll('.cell').forEach(cell => {
            const span = cell.querySelector('span');
            if (span) {
                span.innerHTML = '';
                span.style.color = '';
            }
            cell.classList.remove('win');
        });
        document.getElementById('game-status').innerHTML = '';
    }

        function makeMove(cell) {
            if (!cell) return;

            const index = cell.getAttribute('data-index');
            if (index === null) return;

            fetch('/Computer/MakeMove', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ cellIndex: parseInt(index) })
            })
                .then(response => {
                    if (!response.ok) return response.json().then(err => { throw new Error(err.error) });
                    return response.json();
                })
                .then(data => {
                    if (data.isValid) {
                        // Update player move with dynamic symbol
                        const playerSpan = cell.querySelector('span');
                        if (playerSpan) {
                            playerSpan.innerHTML = data.playerSymbol;
                            playerSpan.style.color = data.playerColor;
                        }

                        // Update computer move with dynamic symbol
                        if (data.computerIndex !== null) {
                            const computerCell = document.querySelector(`[data-index="${data.computerIndex}"]`);
                            if (computerCell) {
                                const computerSpan = computerCell.querySelector('span');
                                if (computerSpan) {
                                    computerSpan.innerHTML = data.computerSymbol;
                                    computerSpan.style.color = '#0000ff';
                                }
                            }
                        }

                        if (data.isGameOver) {
                            const gameStatus = document.getElementById('game-status');
                            if (gameStatus) gameStatus.innerHTML = data.winnerMessage;

                            if (data.winningCombination) {
                                data.winningCombination.forEach(index => {
                                    const winCell = document.querySelector(`[data-index="${index}"]`);
                                    if (winCell) winCell.classList.add('win');
                                });
                            }
                        }
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('Move error: ' + error.message);
                });
        }
</script>
}